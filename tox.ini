# Tox configuration for Python 3.10 and managing multiple environments.
# Supports docs (Sphinx for API docs, MkDocs for user guides), testing, and code quality.

[tox]
min_version = 4.0
envlist = 
    docs,      # Sphinx for API documentation
    mkdocs,    # MkDocs for user guides
    lint,      # Linting with flake8 and pylint
    format,    # Code formatting checks with black and isort
    py3{9,10,11,12,13},     # Python 3.10 testing
    pypy,      # Testing on PyPy
    typecheck, # Static type checking with mypy
    coverage   # Code coverage reporting

# Skipsdist avoids building packages for each environment run
skipsdist = true

# Base test environment using Python 3.10
[testenv]
basepython = python3.10
setenv = 
    PYTHONPATH = {toxinidir}
deps = 
    pytest
    pytest-cov
    pytest-cookies
    
commands = 
    pytest --cov=src --cov-report=term-missing

# Documentation build environment using Sphinx
[testenv:docs]
description = Build the API documentation using Sphinx
basepython = python3.10
changedir = docs
deps = 
    sphinx
    furo
    sphinx-rtd-theme
    sphinxcontrib-napoleon
commands =
    sphinx-build -b html -d {envtmpdir}/doctrees . {envtmpdir}/_build/html
    sphinx-build -b html -j auto . {envtmpdir}/_build/html

# MkDocs environment for building the user guide
[testenv:mkdocs]
description = Build the user guides using MkDocs
basepython = python3.10
changedir = docs
deps = 
    mkdocs
    mkdocs-material
    mkdocstrings[python]
    mkdocs-mermaid2-plugin
commands = 
    mkdocs build --clean

# Linting environment to check code quality
[testenv:lint]
description = Run code linting with flake8 and pylint
basepython = python3.10
deps = 
    flake8
    pylint
commands = 
    flake8 src tests
    pylint src tests

# Code formatting environment to ensure consistent style
[testenv:format]
description = Check code formatting with black and isort
basepython = python3.10
deps = 
    black
    isort
commands = 
    black --check .
    isort --check-only .

# Static type checking environment using mypy
[testenv:typecheck]
description = Run static type checks with mypy
basepython = python3.10
deps = 
    mypy
commands = 
    mypy src tests

# Code coverage environment for test coverage reporting
[testenv:coverage]
description = Run tests and generate a coverage report
basepython = python3.10
deps = 
    pytest
    pytest-cov
commands = 
    pytest --cov=src --cov-report=html --cov-report=term
# Code poetry
[testenv]
passenv = PYTHON_VERSION
allowlist_externals = poetry
commands =
    poetry install -v
    pytest --doctest-modules tests --cov --cov-config=pyproject.toml --cov-report=xml
    mypy
# PyPy environment (optional, depending on project compatibility)
[testenv:pypy]
description = Run tests on PyPy
basepython = pypy3
commands = 
    pytest

